version: '3.8'

networks:
  asset_track_network:
    external: false
    name: asset_track_network

services:
  # Database
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: assettrack
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - asset_track_network

  # Message Queue
  rabbitmq:
    image: rabbitmq:3.9-management
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - asset_track_network

  # Agent Service
  agent-service:
    build:
      context: ../app/agent-service
      dockerfile: Dockerfile
    environment:
      - MQ_HOST=rabbitmq
      - MQ_PORT=5672
      - MQ_USER=${MQ_USER:-guest}
      - MQ_PASSWORD=${MQ_PASSWORD:-guest}
      - NODE_ID=local-dev
      - PUBLISH_INTERVAL_SECONDS=3600
    ports:
      - "8005:8000"
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - asset_track_network

  # Collector Service
  collector-service:
    build:
      context: ../app/collector-service
      dockerfile: Dockerfile
    environment:
      - MQ_HOST=rabbitmq
      - MQ_PORT=5672
      - MQ_USER=${MQ_USER:-guest}
      - MQ_PASSWORD=${MQ_PASSWORD:-guest}
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/assettrack
    ports:
      - "8002:8000"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - asset_track_network

  # Processor Service
  processor-service:
    build:
      context: ../app/processor-service
      dockerfile: Dockerfile
    environment:
      - MQ_HOST=rabbitmq
      - MQ_PORT=5672
      - MQ_USER=${MQ_USER:-guest}
      - MQ_PASSWORD=${MQ_PASSWORD:-guest}
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/assettrack
      - COLLECTOR_SERVICE_URL=http://collector-service:8000
    ports:
      - "8001:8000"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      collector-service:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - asset_track_network

  # API Service
  api-service:
    build:
      context: ../app/api-service
      dockerfile: Dockerfile
    environment:
      - PROCESSOR_SERVICE_URL=http://processor-service:8000
      - COLLECTOR_SERVICE_URL=http://collector-service:8000
    ports:
      - "8080:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      processor-service:
        condition: service_started
      collector-service:
        condition: service_started
    restart: unless-stopped
    networks:
      - asset_track_network

  # Notification Service (optional for local demo)
  notification-service:
    build:
      context: ../app/notification-service
      dockerfile: Dockerfile
    environment:
      - TARGET_NAMESPACE=assettrack
      - TARGET_DEPLOYMENT=processor
    ports:
      - "8088:8088"
    depends_on:
      api-service:
        condition: service_started
    restart: unless-stopped
    networks:
      - asset_track_network

  # Web UI
  webapp-ui:
    build:
      context: ../app/webapp-ui/frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      api-service:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - asset_track_network

volumes:
  postgres_data:
  rabbitmq_data:

